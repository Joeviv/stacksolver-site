---
// src/components/ClientLogin.astro
export interface Props {
  clientCode: string;
  apiLoginUrl: string; 
}

const { clientCode, apiLoginUrl } = Astro.props;
---

<div class="login-container">
  <div class="login-box">
    <h2>Acceso Cliente: {clientCode.toUpperCase()}</h2>
    <p>Por favor, ingresa tus credenciales para acceder a tu portal.</p>
    
    <form id={`login-form-${clientCode}`}>
      <div class="form-group">
        <label for={`username-${clientCode}`}>Usuario:</label>
        <input type="text" id={`username-${clientCode}`} name="username" required />
      </div>
      
      <div class="form-group">
        <label for={`password-${clientCode}`}>Contraseña:</label>
        <input type="password" id={`password-${clientCode}`} name="password" required />
      </div>
      
      <div class="form-actions">
        <button type="submit" class="btn-submit">Ingresar</button>
      </div>
      
      <div id={`error-message-${clientCode}`} class="error-message" style="display: none;">
        {/* El mensaje de error se insertará aquí vía JavaScript */}
      </div>
    </form>
  </div>
</div>

<style>
  /* ... LOS ESTILOS PERMANECEN IGUALES A COMO LOS TENÍAMOS ... */
  /* Por brevedad, no los repito aquí, pero asegúrate de que sigan estando. */
  /* Si necesitas que los vuelva a poner, dímelo. */
  .login-container { display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 2rem 1rem; min-height: 60vh; }
  .login-box { background-color: #ffffff; padding: 2.5rem; border-radius: 8px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); width: 100%; max-width: 400px; text-align: center; }
  .login-box h2 { margin-top: 0; margin-bottom: 0.5rem; color: var(--accionar-color, #0071e3); }
  .login-box p { margin-bottom: 1.5rem; color: #555; font-size: 0.95rem; }
  .form-group { margin-bottom: 1.5rem; text-align: left; }
  .form-group label { display: block; margin-bottom: 0.5rem; font-weight: 500; color: #333; }
  .form-group input { width: 100%; padding: 0.75rem; border: 1px solid var(--color-borde, #ccc); border-radius: 4px; box-sizing: border-box; font-size: 1rem; }
  .form-group input:focus { border-color: var(--accionar-color, #0071e3); outline: none; box-shadow: 0 0 0 2px rgba(0, 113, 227, 0.2); }
  .form-actions { margin-top: 1.5rem; }
  .btn-submit { background-color: var(--accionar-color, #0071e3); color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 4px; font-size: 1rem; font-weight: 500; cursor: pointer; transition: background-color 0.2s ease-in-out; width: 100%; }
  .btn-submit:hover { background-color: #005bb5; }
  .error-message { margin-top: 1rem; color: red; font-size: 0.9rem; padding: 0.75rem; background-color: #ffebee; border: 1px solid red; border-radius: 4px; }
</style>

<script define:vars={{ clientCode, apiLoginUrl }}>
  const form = document.getElementById(`login-form-${clientCode}`);
  const errorMessageDiv = document.getElementById(`error-message-${clientCode}`);

  form.addEventListener('submit', async (event) => {
    event.preventDefault();
    errorMessageDiv.style.display = 'none';
    errorMessageDiv.textContent = '';

    const usernameInput = form.elements.username;
    const passwordInput = form.elements.password;

    const username = usernameInput.value;
    const password = passwordInput.value;

    const submitButton = form.querySelector('button[type="submit"]');
    submitButton.disabled = true;
    submitButton.textContent = 'Ingresando...';

    try {
      // --- INICIO BLOQUE MODIFICADO ---
      console.log(`Enviando login a API: ${apiLoginUrl} para ${clientCode}`);
      const response = await fetch(apiLoginUrl, { // Usamos la apiLoginUrl real
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          clientCode: clientCode, // Enviamos clientCode en el cuerpo
          username: username,
          password: password,
        }),
      });
      // --- FIN BLOQUE MODIFICADO ---

      // El bloque de simulación ha sido ELIMINADO.

      const data = await response.json();

      if (response.ok && data.authenticated) {
        console.log('Login exitoso desde API:', data);
        localStorage.setItem(`session_${clientCode}`, JSON.stringify({ 
            loggedIn: true, 
            timestamp: new Date().toISOString(),
            clientName: data.clientData.clientName,
            clientAddress: data.clientData.clientAddress,
            filemakerId: data.clientData.filemakerId
        }));
        
        window.location.reload();

      } else {
        console.error('Login fallido desde API:', data.message || response.statusText);
        errorMessageDiv.textContent = data.message || `Error: ${response.status} - ${response.statusText}. Intenta de nuevo.`;
        errorMessageDiv.style.display = 'block';
      }

    } catch (error) {
      console.error('Error durante el fetch del login:', error);
      errorMessageDiv.textContent = 'Ocurrió un error de conexión. Por favor, intenta más tarde.';
      errorMessageDiv.style.display = 'block';
    } finally {
        submitButton.disabled = false;
        submitButton.textContent = 'Ingresar';
    }
  });
</script>